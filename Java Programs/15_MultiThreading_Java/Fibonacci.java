// PROBLEM STATEMENT 

// Write a multithreaded program that generates the Fibonacci sequence. This program should 
// work as follows: create a class Input that reads the number of Fibonacci numbers that the 
// program is to generate. The class will then create a separate thread that will generate the 
// Fibonacci numbers, placing the sequence in an array. When the thread finishes execution, the 
// parent thread (Input class) will output the sequence generated by the child thread. Because the 
// parent thread cannot begin outputting the Fibonacci sequence until the child thread finishes, 
// the parent thread will have to wait for the child thread to finish

import java.util.*;

import java.util.Scanner;
import java.util.ArrayList;

public class Fibonacci extends Thread {

	public static void main(String args[]) {

		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the number of Terms in the Fibonnaci Sequence ??");
		int num = sc.nextInt();

		Input in = new Input(num);

		in.childThread.start();
		in.start();
	}
}

class Input extends Thread {
	public int limit;
	public ArrayList<Integer> list = new ArrayList<>(); // COMPLETE DECLARATION OF THE ARRAYLIST SYNTAX IS NEEDED

	public Input(int limit) {
		this.limit = limit;
	}

	Thread childThread = new Thread(new Runnable() {
		@Override
		public void run() {
			int termOne = 0;
			int termTwo = 1;
			list.add(0);
			list.add(1);
			for (int i = 2; i < limit; i++) {
				int temp = list.get(i - 1) + list.get(i - 2);
				list.add(temp);
			}

		}
	});

	@Override
	public void run() {
		for (int i = 0; i < limit; i++) {
			System.out.println(list.get(i));
		}
	}

}